SELECT CalculateWorkingDays(1);

select * from DoctorSchedule_Bhaskar;
insert into ajayschedule values(20,1,123,'09:00:00','12:00:00',15);
select * from  ajayappointmentslots;

delete  from ajayappointmentslots;

DROP FUNCTION CalculateWorkingDays();


CREATE OR REPLACE FUNCTION CalculateWorkingDays(in ide INT) RETURNS VARCHAR(500) AS $$
DECLARE 
    done BOOLEAN := FALSE;
    v_doctorID INT;
    processDate DATE := current_date;  -- Set your desired date here
    
    doctorRecord RECORD;  -- Declare a record variable to hold the query result

BEGIN
    -- Loop through DoctorID and WorkingDaysCount
    FOR doctorRecord IN 
        SELECT doctorid
        FROM DoctorSchedule_Bhaskar
        WHERE doctorid = ide
        
    LOOP
        v_doctorID := doctorRecord.doctorid;
        -- Call the process function for each doctor with processDate as a parameter
        PERFORM process(v_doctorID);
    END LOOP;
   
    RETURN 'Success'; -- Replace with the actual result you want to return
END;
$$ LANGUAGE plpgsql;





CREATE OR REPLACE FUNCTION process(
    IN inDoctorID INT
) 
RETURNS VOID AS $$
DECLARE 
    done BOOLEAN := FALSE;
    doctorAvailabilityID INT;
    totalDays INT;
     
    availabilityRecord RECORD;
    processdate DATE; -- Declare processdate variable
    DayOfDate INT; -- Declare DayOfDate variable

BEGIN
    
    FOR availabilityRecord IN 
        SELECT DaysToBook
        FROM DoctorAvailability
        WHERE DoctorID = inDoctorID
    LOOP
		raise notice 'process';
		 RAISE NOTICE 'inDoctorID: %', inDoctorID;
		
        totalDays := availabilityRecord.DaysToBook;
        
        -- Set the processdate to the current date or your desired date
        processdate := CURRENT_DATE; -- You can change this to your desired date
        
        -- Get the specific day of the week as an integer (Monday = 1, Tuesday = 2, etc.)
        SELECT EXTRACT(DOW FROM processdate) INTO DayOfDate;

        -- Call the getdata function for further processing
        PERFORM getdata(DayOfDate, inDoctorID, processdate);

        -- You can use DayOfDate as needed for further processing
    END LOOP;
END;
$$ LANGUAGE plpgsql;








CREATE OR REPLACE FUNCTION getdata(
    IN inNextDayOfWeek INT, 
    IN inDoctorID INT, 
    IN inProcessDate DATE
) 
RETURNS void AS $$
DECLARE 
    done INT ;
    doctorScheduleID INT;
    doctorAvailableDays VARCHAR(7); -- Assuming DoctorAvailableDays is a VARCHAR with a length of 7
    doctoravailablefrom_var TIME;
    doctoravailableto_var TIME;
    doctoravilableslot_var INT;
    updatedTimeFrom TIME;
    updatedTimeTo TIME;
    TimeDifference time;
    TotalSlots INT;
	inN int :=inNextDayOfWeek;
    matchingDates VARCHAR(500) := '';  -- Initialize matchingDates as an empty string

    scheduleRecord RECORD;  -- Declare a record variable

BEGIN
    -- Cursor to fetch DoctorSchedule_ID and DoctorAvailableDays
    FOR scheduleRecord IN
		
        SELECT doctorid, doctorschedule, doctoravailablefrom, doctoravailableto, doctoravailableslot
        FROM  DoctorSchedule_Bhaskar
        WHERE DoctorID = inDoctorID
    LOOP
		raise notice 'getdata';
		
        doctorScheduleID := scheduleRecord.doctorid;
        doctorAvailableDays := scheduleRecord.doctorschedule;
        doctoravailablefrom_var := scheduleRecord.doctoravailablefrom;
        doctoravailableto_var := scheduleRecord.doctoravailableto;
        doctoravilableslot_var := scheduleRecord.doctoravailableslot;
			RAISE NOTICE ' doctorAvailableDays: %', doctorAvailableDays;
			raise notice 'inNextDayOfWeek %',inNextDayOfWeek;
        -- Check if nextDayOfWeek is found in the DoctorAvailableDays
        IF SUBSTRING(doctorAvailableDays, 1, 1) = '1' THEN
			raise notice 'if in getdata';
           
			TimeDifference := doctoravailableto_var - doctoravailablefrom_var;
			RAISE NOTICE 'timedifference: %', TimeDifference;
			--TotalSlots := extract(epoch from TimeDifference):: int * (60/doctoravilableslot_var);
			TotalSlots=4;
			RAISE NOTICE 'totalslots: %', TotalSlots;
            updatedTimeFrom := doctoravailablefrom_var;

            -- Use a loop to insert each time slot into the table
            FOR i IN 1..TotalSlots LOOP
				RAISE NOTICE 'in loop';
                updatedTimeTo := updatedTimeFrom + (doctoravilableslot_var || ' minutes')::INTERVAL;
				RAISE NOTICE 'TotalSlots: %', TotalSlots;
				raise notice 'hii';
				 
                -- Insert the time slot into the ajayappointementslots table
                INSERT INTO  ajayappointmentslots (slotdoctorid,slotdate,slotfrom,slotto,slotstatus)
                VALUES (doctorScheduleID,inProcessDate, updatedTimeFrom, updatedTimeTo,'available');

                -- Increment updatedTimeFrom for the next time slot
                updatedTimeFrom := updatedTimeTo;
            END LOOP;
        END IF;
    END LOOP;
	
END;
$$ LANGUAGE plpgsql;








CREATE OR REPLACE FUNCTION process()
RETURNS trigger AS $$

   
BEGIN
    
   perform CalculateWorkingDays(new.doctorid);
END;
$$ LANGUAGE plpgsql;



create trigger slotgenerationtrigger1
after insert on yesu_Doctor_schedule for
each row execute function process();

alter table ajayschedule enable trigger slotgenerationtrigger1





