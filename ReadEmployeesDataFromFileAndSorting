import java.io.BufferedReader;
import java.io.*;
import java.io.IOException;
import java.util.*;

class Employee implements  Serializable{
    private int id;
    private String name;
    private String designation;
    private double salary;
    private int experience;
   
    public Employee(int id, String name, String designation, double salary, int experience) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
        this.experience = experience;
    }
    
    // Getter methods
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getDesignation() {
        return designation;
    }

    public double getSalary() {
        return salary;
    }

    public int getExperience() {
        return experience;
    }

    // Getters and setters (omitted for brevity)

    public static ArrayList<Employee> readEmployeeRecords() {
        ArrayList<Employee> employees = new ArrayList<>();

        try{
            BufferedReader reader = new BufferedReader(new FileReader("emp.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                Employee employee = parseEmployeeRecord(line);
                if (employee != null) {
                    employees.add(employee);
                }
            }
        } 
        catch (IOException e) {
            e.printStackTrace();
        }

        return employees;
    }

    private static Employee parseEmployeeRecord(String record) {
        String[] parts = record.split(":");
        if (parts.length ==5) {
            try {
                int id = Integer.parseInt(parts[0]);
                String name = parts[1];
                String designation = parts[2];
                double salary = Double.parseDouble(parts[3]);
                int experience = Integer.parseInt(parts[4]);

                return new Employee(id, name, designation, salary, experience);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
}


public class Main {
    public static void main(String[] args) {
            double sumSalary=0;
            double minSalary=Double.MAX_VALUE;
            double maxSalary=Double.MIN_VALUE;
        // Read employee records into ArrayList
        ArrayList<Employee> emp = Employee.readEmployeeRecords();
        Collections.sort(emp,new MyComparator());
        System.out.println("Display employee details After sort");
        for (Employee employee : emp) {
            
   
            System.out.println("ID: " + employee.getId());
            System.out.println("Name: " + employee.getName());
            System.out.println("Designation: " + employee.getDesignation());
            System.out.println("Salary: " + employee.getSalary());
            System.out.println("Experience: " + employee.getExperience());
            System.out.println("------------------------");
            if(minSalary>employee.getSalary())
            minSalary=employee.getSalary();
            if(maxSalary<employee.getSalary())
            maxSalary=employee.getSalary();
            sumSalary+=employee.getSalary();
        }
            System.out.println("min salary: " + minSalary);
            System.out.println("max salary: " + maxSalary);

            System.out.println("Total salary: " + sumSalary);
             System.out.println("Average salary: " + sumSalary/emp.size());
             try (ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("employees.ser"))) 
             {
            outputStream.writeObject(emp);
            System.out.println("Employee collection serialized to employees.ser");
        } catch (IOException e)
        {
            e.printStackTrace();
        }

        // Deserialize the ArrayList<Employee> collection from the file
        try (ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("employees.ser"))) {
            ArrayList<Employee> deserializedEmployees = (ArrayList<Employee>) inputStream.readObject();
            System.out.println("Employee collection deserialized from employees.ser");

            // Display deserialized employee details
            System.out.println("Display deserialized employee details:");
            for (Employee employee : deserializedEmployees) {
                System.out.println("ID: " + employee.getId());
                System.out.println("Name: " + employee.getName());
                System.out.println("Designation: " + employee.getDesignation());
                System.out.println("Salary: " + employee.getSalary());
                System.out.println("Experience: " + employee.getExperience());
                System.out.println("------------------------");
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
             
    }
}
}
class MyComparator implements Comparator<Employee>{
/*
     public int compare(Employee e1, Employee e2) {
        if (e1.getSalary() < e2.getSalary())
            return -1;
        else if (e1.getSalary() > e2.getSalary())
            return 1;
        else
            return 0;
    }
    */
    public int compare(Employee e1, Employee e2) {
        Double E1=(Double)e1.getSalary();
        Double E2=(Double)e2.getSalary();
        return E1.compareTo(E2);
    }
    
}


*******************************************************************************************



//2:09

import java.util.*;
import java.io.*;
class employee implements Serializable{
    
    int id;
    String ename;
    String desig;
    int expe;
    employee(int id,String ename,String desig,int expe){
        this.id=id;
        this.ename=ename;
        this.desig=desig;
        this.expe=expe;
    }
    static ArrayList<employee> readFromFile(){
        ArrayList<employee> emp=new ArrayList<>();
        try{
            BufferedReader b=new BufferedReader(new FileReader("emp.txt"));
            String s=b.readLine();
            while(s!=null){
              employee e=getEmployeeData(s);
              emp.add(e);
            s=b.readLine();
            }
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return emp;
    }
    static employee getEmployeeData(String st){
        String a[]=st.split(",");
        try{
            int ide=Integer.parseInt(a[0]);
            String enam=a[1];
            String des=a[2];
            int exp=Integer.parseInt(a[3]);
             return new employee(ide,enam,des,exp);
        }
        catch(Exception e){
            e.printStackTrace();
        }
       return null;
    }
    
}
class Main{
    public static void main(String args[]){
        ArrayList<employee> totalEmp=employee.readFromFile();
        for(employee e:totalEmp){
            System.out.println("id "+e.id+" name "+e.ename+" designation "+e.desig+" experience "+e.expe);
        }
        Collections.sort(totalEmp,(e1,e2) -> {
            Integer i1=(Integer)e1.expe;
            Integer i2=(Integer)e2.expe;
            return i1.compareTo(i2);
            
        }
        );
        
        try{
            ObjectOutputStream ser=new ObjectOutputStream(new FileOutputStream("yesu.ser"));
            ser.writeObject(totalEmp);
            System.out.println("SERIALZATION COMPLETED");
        }
        catch(Exception e){
            e.printStackTrace();
        }
        System.out.println("PRINTING BELOW DESERIALZATION PROCESS");
        try{
        ObjectInputStream sei=new ObjectInputStream(new FileInputStream("yesu.ser"));
        ArrayList<employee> deserial=(ArrayList<employee>)sei.readObject();
        for(employee e:deserial){
            System.out.println("id "+e.id+" name "+e.ename+" designation "+e.desig+" experience "+e.expe);
        }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        
    }
}



